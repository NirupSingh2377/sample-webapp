pipeline {
    agent any

    environment {
        // Hardcoded values
        AWS_ACCOUNT_ID = '390403869878'
        AWS_DEFAULT_REGION = 'us-east-1'
        IMAGE_REPO_NAME = 'sample-webapp'
        IMAGE_TAG = 'latest'
        REPOSITORY_URI = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${IMAGE_REPO_NAME}"
        GIT_REPO_URL = 'https://github.com/NirupSingh2377/sample-webapp.git'
    }

    stages {
        stage('Cleanup Docker Environment') {
            steps {
                script {
                    sh 'docker system prune -af || true'
                }
            }
        }

        stage('Login into AWS ECR') {
            steps {
                script {
                    withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: ECR_CREDENTIALS_ID]]) {
                        sh """
                            aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | \
                            docker login --username AWS --password-stdin ${REPOSITORY_URI}
                        """
                    }
                }
            }
        }

        stage('Cloning Git Repository') {
            steps {
                git branch: 'master', url: GIT_REPO_URL, credentialsId: GIT_CREDENTIALS_ID
            }
        }

        stage('Build') {
            steps {
                sh 'mvn clean package'  // Ensure the WAR file is built and available in the /target folder
            }
        }

        stage('Build Docker Image') {
            steps {
                sh "docker build -t ${IMAGE_REPO_NAME}:${IMAGE_TAG} ."
            }
        }

        stage('Tag Docker Image') {
            steps {
                sh "docker tag ${IMAGE_REPO_NAME}:${IMAGE_TAG} ${REPOSITORY_URI}:${IMAGE_TAG}"
            }
        }

        stage('Run Docker Container') {
            steps {
                sh "docker run -d -p 8080:8080 --name ${IMAGE_REPO_NAME}-container ${IMAGE_REPO_NAME}:latest"
            }
        }

        stage('Push Image to ECR') {
            steps {
                sh "docker push ${REPOSITORY_URI}:${IMAGE_TAG}"
            }
        }
    }
}
